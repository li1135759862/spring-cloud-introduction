<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>cn.lxl</groupId>
		<artifactId>introduction</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>openfeign</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>openfeign</name>
	<description>openfeign</description>

	<properties>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>cn.lxl</groupId>
			<artifactId>common</artifactId>
			<version>${project-version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.2.2</version>
				<configuration>
					<!--镜像名称-->
					<imageName>${docker.repostory}/${docker.namespace}/${project.name}</imageName>
					<forceTags>true</forceTags>
					<imageTags>
						<imageTag>latest</imageTag>
					</imageTags>
					<!-- 指定Dockerfile所在的路径 -->
					<dockerDirectory>src/docker</dockerDirectory>
					<!-- 指定仓库地址 -->
					<!--					<dockerHost>http://${docker.repostory}:2375</dockerHost>-->
					<resources>
						<resource>
							<!-- 指定要复制的目录路径，这里是当前目录 -->
							<targetPath>/</targetPath>
							<!-- 指定要复制的根目录，这里是target目录 -->
							<directory>${project.build.directory}</directory>
							<!-- 指定需要拷贝的文件，这里指最后生成的jar包 -->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>

					<!--推送阿里云相关-->
					<serverId>docker-aliyun</serverId>
					<!--表示阿里云的docker仓库地址。阿里云的容器镜像服务地址-->
					<registryUrl>${docker.repostory}</registryUrl>
					<!--表示推送镜像到仓库。-->
					<pushImage>true</pushImage>
					<skipDocker>${skipDocker}</skipDocker>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
